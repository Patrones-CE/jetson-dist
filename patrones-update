#!/usr/bin/env bash

set -e
set -o pipefail

UPDATE_URL='https://raw.githubusercontent.com/Patrones-CE/jetson-dist/main/patrones-update'

if [ $UID -ne 0 ]; then
	exec sudo "$0" "$USER"
elif [ $# -ne 1 ]; then
	echo "$0 must be run as a non-root user" >&2
	exit 1
fi

if [ -z "$PATRONES_UPDATE_CHECK" ]; then
	export PATRONES_UPDATE_CHECK=1
	DL_TMP="$(mktemp)"
	trap 'rm -f -- "$DL_TMP"' EXIT

	if ! wget -O "$DL_TMP" "$UPDATE_URL"; then
		echo "$0: warning: update failed" >&2
	elif ! cmp -s -- "$DL_TMP" "$0"; then
		chmod 755 -- "$DL_TMP"
		mv -v -- "$DL_TMP" "$0"
		exec -- "$0" "$@"
	fi
else
	echo "$0: updated to rev $(sha256sum "$0" | cut -d' ' -f1)" >&2
fi

export DEBIAN_FRONTEND=noninteractive

BOOT_USER="$1"
WITH_PYTORCH=1
WITH_TENSORFLOW=1

apt -y update
apt -y upgrade

if [ -n "$WITH_PYTORCH" ]; then
	apt -y install \
		autoconf \
		bc \
		build-essential \
		g++-8 \
		gcc-8 \
		clang-8 \
		lld-8 \
		gettext-base \
		gfortran-8 \
		iputils-ping \
		libbz2-dev \
		libc++-dev \
		libcgal-dev \
		libffi-dev \
		libfreetype6-dev \
		libhdf5-dev \
		libjpeg-dev \
		liblzma-dev \
		libncurses5-dev \
		libncursesw5-dev \
		libpng-dev \
		libreadline-dev \
		libssl-dev \
		libsqlite3-dev \
		libxml2-dev \
		libxslt-dev \
		locales \
		moreutils \
		openssl \
		python-openssl \
		rsync \
		scons \
		python3-pip \
		libopenblas-dev
fi

if [ -n "$WITH_TENSORFLOW" ]; then
	apt -y install \
		libhdf5-serial-dev \
		hdf5-tools \
		libhdf5-dev \
		zlib1g-dev \
		zip \
		libjpeg8-dev \
		liblapack-dev \
		libblas-dev \
		gfortran
fi

apt -y install \
	nvidia-cuda \
	libomp5 \
	python3-pip

ln -sf /usr/lib/aarch64-linux-gnu/libomp.so.5 /usr/lib/aarch64-linux-gnu/libomp.so

pip3 install --upgrade pip

if [ -n "$WITH_TENSORFLOW" ]; then
	pip3 install -U \
		testresources \
		setuptools
fi

if [ -n "$WITH_PYTORCH" ]; then
	pip3 install \
		aiohttp \
		numpy=='1.19.4' \
		scipy=='1.5.3'

	pip3 install --ignore-installed PyYAML

	export "LD_LIBRARY_PATH=/usr/lib/llvm-8/lib:$LD_LIBRARY_PATH"
	pip3 install --upgrade protobuf

	pip3 install --no-cache \
		'https://developer.download.nvidia.com/compute/redist/jp/v461/pytorch/torch-1.11.0a0+17540c5+nv22.01-cp36-cp36m-linux_aarch64.whl'
fi

if [ -n "$WITH_TENSORFLOW" ]; then
	ln -fsv /usr/include/locale.h /usr/include/xlocale.h

	# https://forums.developer.nvidia.com/t/failed-building-wheel-of-h5py/263322/5

	pip3 install -U \
		Cython==0.29.36 \
		pkgconfig

	cd /tmp
	rm -rf h5py
	git clone https://github.com/h5py/h5py.git
	cd h5py
	git config user.name "$USER"
	git config user.email "$USER@$(hostname)"
	git checkout 3.1.0
	git cherry-pick 3bf862daa4ebeb2eeaf3a0491e05f5415c1818e4
	H5PY_SETUP_REQUIRES=0 pip3 install . --no-deps --no-build-isolation
	cd ..
	rm -rf h5py

	pip3 install -U \
		numpy==1.19.4 \
		future \
		mock \
		keras_preprocessing \
		keras_applications \
		gast==0.2.1 \
		protobuf \
		pybind11 \
		packaging

	pip3 install \
		--extra-index-url https://developer.download.nvidia.com/compute/redist/jp/v461 \
		tensorflow-gpu
fi

pip3 install \
	jupyter \
	matplotlib \
	optuna \
	pandas \
	pandas-profiling \
	pillow \
	scikit-learn \
	scikit-image \
	seaborn \
	tabulate

if [ -n "$WITH_PYTORCH" ]; then
	pip3 install \
		torchvision \
		torchaudio \
		torchmetrics
fi

if [ -n "$WITH_TENSORFLOW" ]; then
	pip3 install \
		keras \
		tensorflow-datasets
fi

cat >/etc/systemd/system/jupyter-notebook.service <<EOF
[Unit]
Description=Jupyter Notebook
After=syslog.target network.target

[Service]
User=$BOOT_USER
Group=$BOOT_USER
ExecStart=/usr/local/bin/jupyter notebook --ip 0.0.0.0 --port 8888 --no-browser
WorkingDirectory=/home/$BOOT_USER

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
[ "$(systemctl is-active jupyter-notebook)" != active ] || systemctl restart jupyter-notebook
systemctl enable --now jupyter-notebook

apt -y autoremove
[ ! -f /var/run/reboot-required ] || systemctl reboot
